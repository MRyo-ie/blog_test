<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 技術ブログ（仮） | 趣味の研究開発メモ</title>
    <link>https://MRyo-ie.github.io/blog_test/post/</link>
    <description>Recent content in Posts on 技術ブログ（仮） | 趣味の研究開発メモ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 16 Apr 2021 11:10:57 +0900</lastBuildDate><atom:link href="https://MRyo-ie.github.io/blog_test/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BERTを最小構成で動かしてみた 1　〜 日本語BERT でMask予測 〜</title>
      <link>https://MRyo-ie.github.io/blog_test/post/bert/1_%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</link>
      <pubDate>Fri, 16 Apr 2021 11:10:57 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/bert/1_%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/</guid>
      <description>
        
          &lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;今更ですが、BERT（&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;huggingface/transformers&lt;/a&gt;）を動かしてみたので、その備忘録です。&lt;br&gt;
全5回シリーズを投稿する予定で、本稿はその第１回目になります。&lt;/p&gt;
&lt;p&gt;なお、シリーズは以下のようになる予定です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BERTを最小構成で動かしてみた 1　〜 日本語BERT でMask予測 〜  ← 今ここ&lt;/li&gt;
&lt;li&gt;BERTを最小構成で動かしてみた 2　〜 日本語BERT で文章分類 fine-tuning 〜&lt;/li&gt;
&lt;li&gt;BERTをカスタマイズしてみた 1　〜 日本語BERT,T5 でマルチタスクfine-tuning 〜&lt;/li&gt;
&lt;li&gt;BERTをカスタマイズしてみた 2　〜 huggingface/transformers を色々試して見る 〜&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;環境&#34;&gt;環境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Googloe Colab&lt;/li&gt;
&lt;li&gt;（おまけ）jetson AGX Xavier（失敗？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;p&gt;東北大、京大 のモデルで、Mask 予測を動かしてみました。&lt;/p&gt;
&lt;p&gt;以下、最小コードです。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;import torch
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;from transformers import AutoTokenizer, AutoModelForMaskedLM
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;# トークナイザーとモデルの準備
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;tokenizer = AutoTokenizer.from_pretrained(&amp;#39;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#39;)
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;model = AutoModelForMaskedLM.from_pretrained(&amp;#39;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#39;)
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;def predict(input_ids):
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    # テキストをテンソルに変換
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    input_ids = tokenizer.encode(text, return_tensors=&amp;#39;pt&amp;#39;)
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;    masked_index = torch.where(input_ids == tokenizer.mask_token_id)[1].tolist()[0]
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;    # 推論
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;    result = model(input_ids)
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;    pred_ids = result[0][:, masked_index].topk(5).indices.tolist()[0]
&lt;span class=&#34;ln&#34;&gt;16&lt;/span&gt;    for pred_id in pred_ids:
&lt;span class=&#34;ln&#34;&gt;17&lt;/span&gt;        output_ids = input_ids.tolist()[0]
&lt;span class=&#34;ln&#34;&gt;18&lt;/span&gt;        output_ids[masked_index] = pred_id
&lt;span class=&#34;ln&#34;&gt;19&lt;/span&gt;        print(&amp;#39;[Info] pred_id : &amp;#39;, pred_id,  &amp;#39;,\n    &amp;#39;, output_ids)
&lt;span class=&#34;ln&#34;&gt;20&lt;/span&gt;        print(&amp;#39;  &amp;#39;, tokenizer.decode(output_ids))
&lt;span class=&#34;ln&#34;&gt;21&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;22&lt;/span&gt;# テキスト
&lt;span class=&#34;ln&#34;&gt;23&lt;/span&gt;text = f&amp;#39;吾輩は{tokenizer.mask_token}である。名前はまだない。&amp;#39;
&lt;span class=&#34;ln&#34;&gt;24&lt;/span&gt;predict(text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/huggingface/transformers&#34;&gt;huggingface/transformers&lt;/a&gt; が色々ラップしてくれているので、これだけでOK。すごい。&lt;/p&gt;
&lt;p&gt;以下、細かいコードの説明です。&lt;/p&gt;
&lt;h3 id=&#34;tokenizer-model-の読み込み&#34;&gt;Tokenizer, Model の読み込み。&lt;/h3&gt;
&lt;p&gt;huggingface/transformers では、docker-hub のように、事前学習済みモデルを公開できる場所があり、そこに日本語学習済みモデルもいくつか上がっています。（調査中）&lt;/p&gt;
&lt;p&gt;その中でも有名なものとして、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;東北大学のモデル
&lt;ul&gt;
&lt;li&gt;cl-tohoku/bert-base-japanese-v2&lt;/li&gt;
&lt;li&gt;（旧ver）cl-tohoku/bert-base-japanese-whole-word-masking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;京都大学のモデル
&lt;ul&gt;
&lt;li&gt;Japanese_L-12_H-768_A-12_E-30_BPE/bert_config.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;があるので、今回は、それらを実際に試してみました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;# トークナイザーとモデルの準備
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;tokenizer = AutoTokenizer.from_pretrained(&amp;#39;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#39;)
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;model = AutoModelForMaskedLM.from_pretrained(&amp;#39;cl-tohoku/bert-base-japanese-whole-word-masking&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;tokenizer-model-の読み込み-1&#34;&gt;Tokenizer, Model の読み込み。&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;def predict(input_ids):
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;    # テキストをテンソルに変換
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;    input_ids = tokenizer.encode(text, return_tensors=&amp;#39;pt&amp;#39;)
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;    masked_index = torch.where(input_ids == tokenizer.mask_token_id)[1].tolist()[0]
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;    
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;    # 推論
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;    result = model(input_ids)
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    pred_ids = result[0][:, masked_index].topk(5).indices.tolist()[0]
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;    for pred_id in pred_ids:
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;        output_ids = input_ids.tolist()[0]
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;        output_ids[masked_index] = pred_id
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;        print(&amp;#39;[Info] pred_id : &amp;#39;, pred_id,  &amp;#39;,\n    &amp;#39;, output_ids)
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;        print(&amp;#39;  &amp;#39;, tokenizer.decode(output_ids))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;結果&#34;&gt;結果&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;text = f&amp;#39;吾輩は{tokenizer.mask_token}である。名前はまだない。&amp;#39;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;predict(text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行結果は、↓ のようになりました。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;[Info] pred_id :  6040 ,
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;     [2, 7184, 30046, 9, 6040, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;   [CLS] 吾輩 は 猫 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;[Info] pred_id :  2928 ,
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;     [2, 7184, 30046, 9, 2928, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;   [CLS] 吾輩 は 犬 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;[Info] pred_id :  1410 ,
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;     [2, 7184, 30046, 9, 1410, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;   [CLS] 吾輩 は 人間 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;[Info] pred_id :  10082 ,
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;     [2, 7184, 30046, 9, 10082, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;   [CLS] 吾輩 は 狼 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;[Info] pred_id :  1325 ,
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;     [2, 7184, 30046, 9, 1325, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;   [CLS] 吾輩 は 私 で ある 。 名前 は まだ ない 。 [SEP]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;text = f&amp;#39;テレビで{tokenizer.mask_token}の試合を見る。&amp;#39;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;predict(text)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;[Info] pred_id :  1301 ,
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;     [2, 571, 12, 1301, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;   [CLS] テレビ で サッカー の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;[Info] pred_id :  5653 ,
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;     [2, 571, 12, 5653, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;   [CLS] テレビ で バスケットボール の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;[Info] pred_id :  15235 ,
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;     [2, 571, 12, 15235, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;   [CLS] テレビ で 阪神タイガース の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;[Info] pred_id :  542 ,
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;     [2, 571, 12, 542, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;   [CLS] テレビ で 代表 の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;[Info] pred_id :  91 ,
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;     [2, 571, 12, 91, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt;15&lt;/span&gt;   [CLS] テレビ で 日本 の 試合 を 見る 。 [SEP]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;あっさり出来てしまって、結構びっくりしました。&lt;/p&gt;
&lt;h2 id=&#34;おまけ&#34;&gt;おまけ&lt;/h2&gt;
&lt;h3 id=&#34;jetson-agx-xavier-で動かしてみた&#34;&gt;Jetson AGX Xavier で動かしてみた&lt;/h3&gt;
&lt;p&gt;予測結果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;[CLS] 吾輩 は し で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;[CLS] 吾輩 は 一 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;[CLS] 吾輩 は と で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;[CLS] 吾輩 は 数 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;[CLS] 吾輩 は 生まれ で ある 。 名前 は まだ ない 。 [SEP]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;なぜかうまくいかなかったです...。&lt;/p&gt;
&lt;p&gt;一応、デバッグのために id を表示してみたけど...&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;[Info] pred_id :  15 ,
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;     [2, 7184, 30046, 9, 15, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;   [CLS] 吾輩 は し で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;[Info] pred_id :  52 ,
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;     [2, 7184, 30046, 9, 52, 12, 31, 8, 1381, 9, 2941, 80, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;   [CLS] 吾輩 は 一 で ある 。 名前 は まだ ない 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;[Info] pred_id :  13 ,
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    ・・・
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;[Info] pred_id :  276 ,
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    ・・・
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;[Info] pred_id :  1115 ,
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    ・・・
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;[Info] pred_id :  15 ,
&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;     [2, 571, 12, 15, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;   [CLS] テレビ で し の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;[Info] pred_id :  52 ,
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;     [2, 571, 12, 52, 5, 608, 11, 2867, 8, 3]
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;   [CLS] テレビ で 一 の 試合 を 見る 。 [SEP]
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;[Info] pred_id :  13 ,
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;    ・・・
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;[Info] pred_id :  1115 ,
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;    ・・・
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;[Info] pred_id :  281 ,
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;    ・・・
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Google Colab のときと id が違うので、Tokenizer 側ではなく、
Model 側に問題があるだろうとの結論に至りました。
が、結局原因は分からず...。&lt;/p&gt;
&lt;p&gt;（これからカスタマイズしていくうちに、原因が分かると良いな...）&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>hugo のページに画像を挿入する方法</title>
      <link>https://MRyo-ie.github.io/blog_test/post/hugo-tips/1_add-img/</link>
      <pubDate>Thu, 01 Apr 2021 12:29:43 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/hugo-tips/1_add-img/</guid>
      <description>
        
          &lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;Hugo で技術ブログを立ち上げてみたが、画像の挿入が想像以上に難しかった...。&lt;/p&gt;
&lt;p&gt;具体的には、テーマによって以下のような違いがあった。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記法
&lt;ul&gt;
&lt;li&gt;マークダウン&lt;/li&gt;
&lt;li&gt;テーマが用意しているオリジナルの（複数種類）&lt;/li&gt;
&lt;li&gt;そもそも画像が挿入できない&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;保存場所
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;post/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;resources/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;その上、関連する情報がググってもすぐには出てこなかったので、時間を使ってしまった...。&lt;/p&gt;
&lt;p&gt;なので、メモも兼ねて、調べた手順などを軽くまとめてみることにした。&lt;/p&gt;
&lt;h2 id=&#34;記法の違いについて&#34;&gt;記法の違いについて&lt;/h2&gt;
&lt;h3 id=&#34;マークダウン記法-の場合&#34;&gt;マークダウン記法 の場合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;![]()&lt;/code&gt; でできる。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;テーマごとのオリジナルの記法-の場合&#34;&gt;テーマごとのオリジナルの記法 の場合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テーマによって、記法が微妙に違う。&lt;/li&gt;
&lt;li&gt;画像挿入ができない（マークダウン記法が使えず、オリジナルもない）テーマもある。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;各テーマの画像挿入方法&#34;&gt;各テーマの画像挿入方法&lt;/h2&gt;
&lt;h3 id=&#34;調べ方&#34;&gt;調べ方&lt;/h3&gt;
&lt;p&gt;以下の流れで調べるのが良さそう。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;各テーマの README.md を探してみる。
&lt;ul&gt;
&lt;li&gt;例）&lt;a href=&#34;https://themes.gohugo.io/hugo-clarity/#images&#34;&gt;Clarity&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Images&lt;/code&gt; 以下にある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;例）&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-fuji/#-image-zoom-and-lazyload-settings&#34;&gt;fuji&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Image zoom and lazyload settings&lt;/code&gt; の項にある。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;実際に挿入してみる。
&lt;ul&gt;
&lt;li&gt;大抵は、一発では表示されないです...。&lt;/li&gt;
&lt;li&gt;画像のデフォルトの保存場所が、テーマによって違うため（？）&lt;/li&gt;
&lt;li&gt;一般的には、&lt;code&gt;【リポジトリRoot】/static/&lt;/code&gt; か &lt;code&gt;【リポジトリRoot】/assets/&lt;/code&gt; の&lt;a href=&#34;https://mertbakir.gitlab.io/hugo/image-processing-in-hugo/&#34;&gt;ようです&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;画像が表示されない場合...
&lt;ul&gt;
&lt;li&gt;画像を「新しいタブで開く」して、パスを確認する。
&lt;ul&gt;
&lt;li&gt;例）
&lt;ul&gt;
&lt;li&gt;マークダウン → &lt;code&gt;![Alt text](20210327_155116.png)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;パス（URL） → &lt;code&gt;http://localhost:1313/【Root】/post/hugo_init/〜.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;↑ の場合は、
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;【Root】/assets/post/hugo_init/〜.png&lt;/code&gt; または、&lt;/li&gt;
&lt;li&gt;&lt;code&gt;【Root】/static/post/hugo_init/〜.png&lt;/code&gt;
に保存すると、表示されるかも。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;参考私の環境の場合&#34;&gt;（参考）私の環境の場合&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テーマ： Clarity&lt;/li&gt;
&lt;li&gt;画像の保存場所
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;【リポジトリRoot】/content/post/【記事名】/〜.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;（一応、&lt;code&gt;【リポジトリRoot】/static/〜/〜.png&lt;/code&gt; もできるっぽい？）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主に使っている記法
&lt;ul&gt;
&lt;li&gt;マークダウン方式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;![](〜/〜.png)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- #### (theme) Fuji
- 画像の保存場所： 
- マークダウン上での書き方

#### (theme) Fuji
- 画像の保存場所： 
- マークダウン上での書き方 --&gt;
&lt;h3 id=&#34;参考&#34;&gt;参考&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mertbakir.gitlab.io/hugo/image-processing-in-hugo/&#34;&gt;image processing in hugo ep18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>【メモ】hugo themes からデザインを要素分解してみた。</title>
      <link>https://MRyo-ie.github.io/blog_test/post/hugo-hello_world/survey_themes_blog/</link>
      <pubDate>Wed, 31 Mar 2021 01:01:18 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/hugo-hello_world/survey_themes_blog/</guid>
      <description>
        
          &lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;自分のblogなので、好みのデザインにしたい！　→　「自分好み」を徹底的に分析することにした。&lt;/li&gt;
&lt;li&gt;「自分好み」を分析するために、「hugo blog のデザイン」の要素を書き出してみることにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分析&#34;&gt;分析&lt;/h1&gt;
&lt;h2 id=&#34;要素分解メモ&#34;&gt;要素分解（メモ）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;hugo themes の blog 系のテンプレを30くらい見て、デザインで気になったところを列挙してみた。&lt;/li&gt;
&lt;li&gt;表にまとめてみた。
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1CL_OapprPMT0qE8wEEQCf3Jd1APyd-Ja8taLBB2GbTU/edit#gid=0&#34;&gt;https://docs.google.com/spreadsheets/d/1CL_OapprPMT0qE8wEEQCf3Jd1APyd-Ja8taLBB2GbTU/edit#gid=0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;要素一覧&#34;&gt;要素一覧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;UI&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;リスト&lt;/li&gt;
&lt;li&gt;コードブロック&lt;/li&gt;
&lt;li&gt;URLリンク&lt;/li&gt;
&lt;li&gt;表&lt;/li&gt;
&lt;li&gt;引用ブロック&lt;/li&gt;
&lt;li&gt;（Twitter）引用ブロック&lt;/li&gt;
&lt;li&gt;H1, H2 の区切り線&lt;/li&gt;
&lt;li&gt;Light / Dark モード&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;右カラム
&lt;ul&gt;
&lt;li&gt;テーマによって、ある／ない、自己紹介、カテゴリ／タグ、最近の投稿 など様々。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URLリンク&lt;/li&gt;
&lt;li&gt;脚注&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ベース（背景、余白）&lt;/li&gt;
&lt;li&gt;メイン&lt;/li&gt;
&lt;li&gt;総合（バランス）
&lt;ul&gt;
&lt;li&gt;主観的に。&lt;/li&gt;
&lt;li&gt;アクセントカラーのレベルになると正直分からないので、その辺も含めて総合的に判断することにした。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必須機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;画像 埋め込み
&lt;ul&gt;
&lt;li&gt;できないテーマが意外と多い。&lt;/li&gt;
&lt;li&gt;テーマによって、記法や保存場所が違う。（調べるのも一苦労だった...）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;便利機能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数式（TeX）
&lt;ul&gt;
&lt;li&gt;これも、テーマによって記法や初期設定が違う...。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;動画 埋め込み&lt;/li&gt;
&lt;li&gt;チェックリスト&lt;/li&gt;
&lt;li&gt;検索バー&lt;/li&gt;
&lt;li&gt;ポートフォリオページ&lt;/li&gt;
&lt;li&gt;Doc ページ&lt;/li&gt;
&lt;li&gt;上に戻る ボタン（^）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自分の好みは&#34;&gt;自分の好みは...？&lt;/h2&gt;
&lt;p&gt;30ページほどみた結果、以下を重視することが見えてきた。
若干、 機能 &amp;gt; デザイン（UI） ？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;画像埋め込みができるか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;![]()&lt;/code&gt; が使えるか。&lt;/li&gt;
&lt;li&gt;テーマによっては、デフォルトでその仕組みが用意されてない or 記法が特殊...。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;見やすさ
&lt;ul&gt;
&lt;li&gt;背景色と色が近すぎる項目（（特殊）文字、（コード／引用）ブロック...などの色）はないか&lt;/li&gt;
&lt;li&gt;URLリンク がリンクっぽいか（押せそう？）&lt;/li&gt;
&lt;li&gt;マークダウン
&lt;ul&gt;
&lt;li&gt;節のサイズ感&lt;/li&gt;
&lt;li&gt;節（H1, H2） に下線が引かれるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;右カラム があるか&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;最終的に&#34;&gt;最終的に...&lt;/h1&gt;
&lt;h2 id=&#34;ベースにするテーマ&#34;&gt;ベースにするテーマ&lt;/h2&gt;
&lt;p&gt;以下の３つまで絞れた。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-clarity/&#34;&gt;Clarity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-theme-fuji/&#34;&gt;Fuji&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/hugo-eureka/&#34;&gt;Eureka&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;けど、正直どれも 一長一短...。
なので、それぞれの良いところを抽出、合体して、理想を目指していきたい。&lt;/p&gt;
&lt;h2 id=&#34;凄かったテーマ&#34;&gt;凄かったテーマ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ublogger.netlify.app/&#34;&gt;uBlogger&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;フローチャート！？&lt;/li&gt;
&lt;li&gt;音楽再生など、機能が凄かった。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/toha/&#34;&gt;Toha&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;デザイン全般&lt;/li&gt;
&lt;li&gt;左カラム（エクスプローラー？）&lt;/li&gt;
&lt;li&gt;Note&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/theme/hugo-story/&#34;&gt;Hugo Story&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;細かいデザイン&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://themes.gohugo.io/airspace-hugo/&#34;&gt;Airspace Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;右カラム&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;残りのタスク&#34;&gt;残りのタスク&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;もう 30 くらいテンプレを漁ってみる。&lt;/li&gt;
&lt;li&gt;hugo のオリジナルサイトで勉強してみる？&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Slackbot に 機械学習・Deep Learning モデルを接続してみた。 【実装編】</title>
      <link>https://MRyo-ie.github.io/blog_test/post/slackbot-ml_model_tester/%E5%AE%9F%E8%A3%85memo/</link>
      <pubDate>Sat, 27 Mar 2021 17:01:45 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/slackbot-ml_model_tester/%E5%AE%9F%E8%A3%85memo/</guid>
      <description>
        
          &lt;h1 id=&#34;概要&#34;&gt;概要&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;../%E7%B4%B9%E4%BB%8B/&#34;&gt;前回&lt;/a&gt; 紹介した『Slackbot - ML/DL model tester』の、実装部分の解説記事です。&lt;/p&gt;
&lt;h2 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;fashion_mnist.png&#34; alt=&#34;fashion mnist で QA&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X： （服などの）画像&lt;/li&gt;
&lt;li&gt;Q： &amp;quot;fashion_mnist&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を、Slack で bot に送ると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A： &amp;quot;服の種類&amp;quot;（class,label）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を返信してくれる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;作ったもの&#34;&gt;作ったもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MRyo-ie/slackbot_ML_model_tester&#34;&gt;GitHub&lt;/a&gt; に公開しています。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;実装&#34;&gt;実装&lt;/h1&gt;
&lt;h2 id=&#34;やったこと&#34;&gt;やったこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;現在の開発状況： 1. のプロトタイプを作った。
&lt;ul&gt;
&lt;li&gt;画像分類モデル（fashion mnist）を bot に接続した。&lt;/li&gt;
&lt;li&gt;対話モデルを bot に接続した。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;システムイメージ
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;system_img-simple.png&#34; alt=&#34;プロトタイプ構成&#34;&gt;&lt;/li&gt;
&lt;li&gt;左側が Slack&lt;/li&gt;
&lt;li&gt;右側が bot サーバー&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;やりたいこと-1&#34;&gt;やりたいこと&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;docker で環境を分離
&lt;ul&gt;
&lt;li&gt;システムイメージ
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;system_img-docker.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;おまけログ&#34;&gt;（おまけ）ログ&lt;/h1&gt;
&lt;h3 id=&#34;未ubuntu-に-docker-インストール&#34;&gt;（未）Ubuntu に docker インストール&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.softek.co.jp/SID/support/sidfmvm/guide/install-docker-ubuntu1804.html&#34;&gt;https://www.softek.co.jp/SID/support/sidfmvm/guide/install-docker-ubuntu1804.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/tkyonezu/items/0f6da57eb2d823d2611d&#34;&gt;https://qiita.com/tkyonezu/items/0f6da57eb2d823d2611d&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Slackbot に 機械学習・Deep Learning モデルを接続してみた。 【紹介編】</title>
      <link>https://MRyo-ie.github.io/blog_test/post/slackbot-ml_model_tester/%E7%B4%B9%E4%BB%8B/</link>
      <pubDate>Sat, 27 Mar 2021 17:01:45 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/slackbot-ml_model_tester/%E7%B4%B9%E4%BB%8B/</guid>
      <description>
        
          &lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;p&gt;大学でDeepLearningの応用系を研究しているので、公開されているSoTAモデルなどを動かそうとすることが多々あるのですが、&lt;strong&gt;予測結果を見る方法&lt;/strong&gt;はリポジトリによってバラバラで、そもそもない（自分で用意する必要がある）こともしばしば...。
（「Jupyter notebook」や &lt;code&gt;predict.py&lt;/code&gt;、&lt;code&gt;evaluate.sh&lt;/code&gt; などが一般的？）&lt;/p&gt;
&lt;p&gt;もちろん、Google Colab など Jupyter notebook を使えば早いのですが、どこか味気ないな... と思っていました。また、「半教師学習／Active Learning」や「対話、質問生成モデル」、「One-bit アノテーション」など、インタラクティブな学習にも興味があり、それらもいつかは試したいと思っていました。&lt;/p&gt;
&lt;p&gt;私はめんどくさがりなので、↑ 全部まとめてできる環境作れないかな〜 と考えていたところ、「チャット（Slack）で対話形式でやれば、全部できるのでは？」というアイディアを思いつきました。&lt;/p&gt;
&lt;p&gt;そこで早速、実装してみることにしました。（思い立ったが吉日！）&lt;/p&gt;
&lt;p&gt;完成イメージ（画像）は ↓ な感じです。&lt;/p&gt;
&lt;h3 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;イメージ（fashion mnist + 画像分類 の場合）
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;img src=&#34;fashion_mnist.png&#34; alt=&#34;fashion mnist で 画像分類&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;X&lt;/strong&gt;： （服などの）画像&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q&lt;/strong&gt;： &amp;quot;fashion mnist&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を チャット（Slack）で bot に送ると、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;： &amp;quot;服の種類&amp;quot;（class, label）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;を返信する。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Q で「文章分類」や「固有表現抽出」、「OCR」、「Detection/Segmentation」...など「タスク名」を指定するイメージです。&lt;/p&gt;
&lt;p&gt;つまり、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(X, Q) = (画像、&amp;quot;OCR&amp;quot;) なら、&lt;br&gt;
　A = OCR結果（json or 文） を返す。&lt;/li&gt;
&lt;li&gt;(X, Q) = (画像、&amp;quot;Detection&amp;quot;) なら、&lt;br&gt;
　A = Detection結果（(bbox, class) の集合） を返す。&lt;/li&gt;
&lt;li&gt;・・・&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ような bot を作るのが目標です。&lt;/p&gt;
&lt;p&gt;内部実装は、docker で環境を分離して、&lt;code&gt;$ docker exec &lt;/code&gt; で呼び出す形を目標に開発を進めています。（モデルを動かす環境（Python や tensorflow, pytorchなどのライブラリ）のバージョン衝突問題で、複数のモデルを動かせないことも多かったため）（未実装）&lt;/p&gt;
&lt;p&gt;（ちなみに）最終目標は、Q を自然言語にして、対話を通して Q を推定するモデルを開発すること！
（汎用AIのプロトタイプを目指して）&lt;/p&gt;
&lt;h3 id=&#34;github&#34;&gt;GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MRyo-ie/slackbot_ML_model_tester&#34;&gt;GitHub&lt;/a&gt;  に公開しています。&lt;br&gt;
※ まだ、Slack bot にモデルを接続しただけの段階です。&lt;br&gt;
　近いうちに、モデルを docker で分離して、「素早く」「簡単に」接続できるような仕組みを作る予定です！&lt;/p&gt;
&lt;h3 id=&#34;チャットbot-環境&#34;&gt;チャット、bot 環境&lt;/h3&gt;
&lt;p&gt;Slack を使うことにしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Slack は、
&lt;ul&gt;
&lt;li&gt;「文」「画像」どちらも使える。&lt;/li&gt;
&lt;li&gt;APIが整備されている。&lt;/li&gt;
&lt;li&gt;bot の作成が簡単！&lt;br&gt;
→ 機械学習・Deeplearning モデルを試す場所として有用なのでは？？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;マイルストーン&#34;&gt;マイルストーン&lt;/h2&gt;
&lt;p&gt;今後実装していきたい機能など。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;↑のbotに、機械学習・Deep Learning モデルを&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;素早く&lt;/li&gt;
&lt;li&gt;簡単に&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接続できるシステムを作る。&lt;del&gt;[ver 0.60]&lt;/del&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（未）Q に「評価関数」を追加する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新しいデータセットを作った時に使う。
&lt;ul&gt;
&lt;li&gt;指定した評価関数で精度を計算する。&lt;/li&gt;
&lt;li&gt;自然言語処理（特に文章系）は、BLEU や LOUGE など、評価手法が複数あることも多いので、まとめてスクリプト化できると、実験が楽になりそう。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;evaluate.py のラッパー集的なもの。
&lt;ul&gt;
&lt;li&gt;自動生成までできたら嬉しい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（未）対話を評価（アノテーション）する仕組みを組み込む。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（未）半教師学習、Active Learning を組み込む。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;（未）（接続モデルが増えてきたら）汎用AI として作り直す。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;「Q：この画像に写ってるのは？」→「A：コートです」&lt;/li&gt;
&lt;li&gt;(X,Q) -&amp;gt; A  の形式に従う全てのタスクを、Qの指示通りにこなすことができるAI。
&lt;ul&gt;
&lt;li&gt;（自然言語処理）対話を通して Q を推定する。
&lt;ul&gt;
&lt;li&gt;Qを聞き出す。 空気を読む？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;del&gt;私にとっての、汎用AIのプロトタイプ&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;対応したいタスク&#34;&gt;対応したいタスク&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IO が「文」or「画像」で表現できる全てのタスク。
&lt;ul&gt;
&lt;li&gt;例）
&lt;ul&gt;
&lt;li&gt;自然言語処理： 対話、文章分類、固有表現抽出、文章生成、QA、...&lt;/li&gt;
&lt;li&gt;画像処理： 画像分類、Detection, Segmentation, VQA, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;最終目標&#34;&gt;最終目標&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;機械学習・DeepLearning モデルと「対話」できる環境を作る。
&lt;ul&gt;
&lt;li&gt;「QA」「会話」モデルを試す場所として。&lt;/li&gt;
&lt;li&gt;私が目標とする汎用AI（右腕AI）のプロトタイプの実験場として。&lt;/li&gt;
&lt;li&gt;半教師学習 や Active Learning のアノテーション環境として。&lt;/li&gt;
&lt;li&gt;マルチタスク や マルチモーダル の実験の高速化を目指して。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qick-start&#34;&gt;Qick Start&lt;/h1&gt;

        
      </description>
    </item>
    
    <item>
      <title>Hugo で blog を作るまで</title>
      <link>https://MRyo-ie.github.io/blog_test/post/hugo-hello_world/hugo_init/</link>
      <pubDate>Sat, 27 Mar 2021 15:10:18 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/hugo-hello_world/hugo_init/</guid>
      <description>
        
          &lt;h1 id=&#34;はじめに３行説明&#34;&gt;はじめに（３行説明）&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;これまで溜めてきた技術メモを、一度どこかにアウトプットしたいと思っていた。&lt;/li&gt;
&lt;li&gt;調査してみた結果、hugo + GitHub Pages が良さそう、という結論に至った。&lt;/li&gt;
&lt;li&gt;せっかくなので、このサイトが作られるまでの過程を、最初の投稿のネタにしてみることにした。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;使用技術&#34;&gt;使用技術&lt;/h1&gt;
&lt;h2 id=&#34;hugo-とは&#34;&gt;Hugo とは&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;#%E5%8F%82%E8%80%83&#34;&gt;参考&lt;/a&gt; や 公式ページ をみた方が早いです。&lt;/p&gt;
&lt;h3 id=&#34;メリット&#34;&gt;メリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全て無料。&lt;/li&gt;
&lt;li&gt;めちゃくちゃ簡単だった。&lt;/li&gt;
&lt;li&gt;記事作成について...
&lt;ul&gt;
&lt;li&gt;Markdown がそのまま記事になる。
&lt;ul&gt;
&lt;li&gt;ローカルで編集できるので、VS Code がそのまま使える。&lt;/li&gt;
&lt;li&gt;スマホでの編集は... 考え中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;テンプレが豊富。&lt;/li&gt;
&lt;li&gt;ブラウザ（ローカル）で、リアルタイムに更新が見れる（お手軽）&lt;/li&gt;
&lt;li&gt;ビルドもかなり早い
&lt;ul&gt;
&lt;li&gt;比較はしてないけど...&lt;/li&gt;
&lt;li&gt;ローカルでは 100ms 以内で終わってた。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;github-pages-とは&#34;&gt;GitHub Pages とは&lt;/h2&gt;
&lt;p&gt;こちらも、&lt;a href=&#34;#%E5%8F%82%E8%80%83&#34;&gt;参考&lt;/a&gt; や &lt;a href=&#34;https://pages.github.com/&#34;&gt;公式ページ&lt;/a&gt; をみた方が早いです。&lt;/p&gt;
&lt;h3 id=&#34;メリット-1&#34;&gt;メリット&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;全て無料。&lt;/li&gt;
&lt;li&gt;めちゃくちゃ簡単だった。&lt;/li&gt;
&lt;li&gt;拡張機能について...
&lt;ul&gt;
&lt;li&gt;（未）GitHub Actions と組み合わせて、デプロイ作業を自動化できるらしい。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;qick-start&#34;&gt;Qick Start&lt;/h1&gt;
&lt;h2 id=&#34;1-hugo-をインストールする&#34;&gt;1. hugo をインストールする。&lt;/h2&gt;
&lt;h2 id=&#34;2-テンプレを作る&#34;&gt;2. テンプレを作る。&lt;/h2&gt;
&lt;h3 id=&#34;デザイン&#34;&gt;デザイン&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hugo themes&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;設定&#34;&gt;設定&lt;/h3&gt;
&lt;h2 id=&#34;3-記事を書く&#34;&gt;3. 記事を書く。&lt;/h2&gt;
&lt;h2 id=&#34;4-github-pages-に公開する&#34;&gt;4. GitHub Pages に公開する。&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;いくつか方法がある。
&lt;ol&gt;
&lt;li&gt;User or organization site（特殊。1 site/アカウント）
&lt;ul&gt;
&lt;li&gt;アカウントにつき１つだけ作れる、その人専用のサイト？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://【ユーザー名】.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project site（一般的。1 site/リポジトリ）
&lt;ul&gt;
&lt;li&gt;リポジトリごとに、ページを作る。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://【ユーザー名】.github.io/【リポジトリ名】&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;カスタム ドメイン（？）
&lt;ul&gt;
&lt;li&gt;（未）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;詳しくは、&lt;a href=&#34;https://pages.github.com/&#34;&gt;公式 Quick Start&lt;/a&gt; をみるのをオススメ。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は、2. Project site（1 site/リポジトリ）で公開しました。&lt;/p&gt;
&lt;h3 id=&#34;41-configtoml-の-baseurl-を変更&#34;&gt;4.1 config.toml の baseURL を変更。&lt;/h3&gt;
&lt;h3 id=&#34;42-github-pages-にdoc-ディレクトリを登録する&#34;&gt;4.2 GitHub Pages に、doc/ ディレクトリを登録する。&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GitHubリポジトリ &amp;gt; Settings &amp;gt; GitHub Pages&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;20210327_155116.png&#34; alt=&#34;設定画面&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;43&#34;&gt;4.3&lt;/h3&gt;
&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages &amp;gt; Project site &amp;gt; Start from scratch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qiita.com/BIwashi/items/c011454bdb9a523bba4a&#34;&gt;HugoとGithub Pagesで自作ブログサイトを作ってみる #1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;HUGO / Host on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>First_post</title>
      <link>https://MRyo-ie.github.io/blog_test/post/first_post/</link>
      <pubDate>Sat, 27 Mar 2021 14:52:14 +0900</pubDate>
      
      <guid>https://MRyo-ie.github.io/blog_test/post/first_post/</guid>
      <description>
        
          &lt;h1 id=&#34;マークダウン-記法&#34;&gt;マークダウン 記法&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;普通のリスト&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; チェックリスト１&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; チェックリスト２
&lt;ul&gt;
&lt;li&gt;詳細１&lt;/li&gt;
&lt;li&gt;詳細２&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;画像&#34;&gt;画像&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;![]()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;logo.png&#34; alt=&#34;first_post/logo.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数式&#34;&gt;数式&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; or .Params.math .Site.Params.math &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; partial &lt;span class=&#34;s2&#34;&gt;&amp;#34;math.html&amp;#34;&lt;/span&gt; . &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;{{&lt;/span&gt; end &lt;span class=&#34;o&#34;&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
